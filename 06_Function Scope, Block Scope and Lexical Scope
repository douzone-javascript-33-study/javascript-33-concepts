## Scope (스코프)

- 범위라는 뜻을 가지고 있다.
- 자바스크립트에서는 변수에 접근할 수 있는 범위라고 볼 수 있다.
- 종류
    - global Scope (전역 스코프)
    - local Scope (지역 스코프)

## Global Scope (전역 스코프)

- 전역에 선언되어 있어서 어느 곳에서든 해당 변수에 접근이 가능하다.
- 어느 {} 괄호안에 속하지 않으면 전역 변수라고 한다.
- 네이밍 충돌이 발생하는 경우가 생길 수 있기 때문에 자주쓰는것을 지양해야 한다.

## Local Scope (지역 스코프)

- 해당 지역에서만 접근 가능하다.
- 코드 내 특정 구역에서만 사용가능한 변수를 지역변수라고 한다.
- 종류
    - Function Scope (함수 스코프)
    - Block Scope (블록 스코프)

## Function Scope (함수 스코프)

- 함수를 선언하게되면 새로운 스코프가 생성되는거다.
- 함수 안에서 선언한 변수는 함수 안에서만 사용이 가능하다.
- 함수 밖에서는 접근 불가능하다.

## Block Scope (블록 스코프)

- {} 괄호로 둘러쌓인 부분을 블록이라고 칭한다.
- {} 괄호 안에서 변수를 선언하면 괄호 안에서만 사용가능하다.
- 함수를 사용하기 위해서는 {} 괄호를 사용하기 때문에 블록 스코프는 함수 스코프의 부분집합이라고 할 수 있다.

## Lexical Scope (렉시컬 스코프)

- 함수를 어디서 선언했는지에 따라 상위 스코프를 결정하는 것을 의미한다.
- 함수의 호출은 중요하지않고 함수의 선언이 중요하다.
- Dynamic Scope : 함수의 호출에 따라 상위 스코프가 정해지는 것

## Hoisting (호이스팅)

- 함수 안에 있는 선언들을 모두 상위로 끌어올려 해당 함수 유효 범위의 최상단에 선언하는 것을 의미한다.
- function 키워드와 함께 선언된 함수들은 항상 현재 스코프의 가장 위로 호이스팅이 된다.
- 함수 표현식으로 작성된 함수들은 현재 스코프의 가장 위로 호이스팅이 되지 않는다.
    - (함수는 항상 사용 전에 미리 선언하는 것이 좋다.)

## Closures (클로저)

- 함수 안에 또 다른 함수를 만들 때마다 클로저를 만든 것이다.
- 함수안의 함수를 클로저라고 칭한다.
- 일반적으로 반환시키기 위해서 만든다.
- 클로저는 바깥 함수 변수에 접근할 수 있다.
    - 사이드 이펙트를 제어하기 위해서 사용된다.
    - private 변수를 만들기 위해서 사용된다.
