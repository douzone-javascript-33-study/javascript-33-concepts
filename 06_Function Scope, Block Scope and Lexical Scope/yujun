자바스크립트에서는 `var`키워드를 사용해 변수를 선언할 경우 **중복된 변수명** 사용이 가능

또한 변수를 선언할 때 `var` 나 `let` 같은 키워드 없이 변수 선언이 가능하다.

키워드가 없이 선언된 변수는 `window` 객체의 변수로 **전역 변수**로 사용 가능하다.

### 스코프란?

자바스크립트에서 어떤 변수에 접근할 수 있는지==변수의 유효범위를 정의한다.

**변수에 접근할 수 있는 범위**

! **스코프**는 함수를 호출할 때가 아니라 **선언**할 때 생김

### 스코프를 사용하는 이유

최소 접근의 원리. 불필요한 접근을 막는다.

### 블록 스코프

- var 는 블록 스코프를 생성하지 않는다. (함수 스코프만)
- let const 는 지역 스코프를 생성한다.
- == 블록 스코프의 일관성을 유지할 수 있다.
- IIFE 를 사용하여 함수에 인자를 전달하는 방법으로도 스코프를 생성할 수 있다.

### 스코프체인

식별자 결정은 현재의 유효 범위 안에 없는 식별자를 찾을때 바깥쪽 범위로 호출자의 렉시컬환경에 속한 외부 렉시컬 환경의 참조를 따라 찾아가는 방식을 취합니다. 이러한 논리적인 연결고리를 스코프 체인이라고 부름

즉 스코프체인은 렉시컬환경을 단반향으로 연결되어 있는 것이다. 만일 양방향으로 참조가 가능하다면 무한 탐색이 이어질 것이다

스코프체인에 의한 함수 검색

동일한 식별자를 가진 함수가 선언된다면 스코프 환경에 따라 식별자결정을 통해 적합한 함수를 호출한다.

```jsx
// 전역함수
function test() {
  console.log('global')
}

function test2() {
  // 중첩 함수
  function test() {
    console.log('local')
  }
  test()
}
// 함수 호출
test2() // -> local
```

### 렉시컬 스코핑 / 정적스코프

함수를 처음 선언하는 순간, 함수 내부의 변수는 자기 스코프로부터 가장 가까운 곳(상위 범위에서)에 있는 변수를 계속 참조하게 됩니다.

함수를 어디서 호출하는지가 아니라 어디에 **선언하였는지에 따라 결정되는 것**을 말한다.

즉, 함수를 어디서 선언하였는지에 따라 상위 스코프를 결정한다는 뜻이며, 가장 중요한 점은 함수의 호출이 아니라 **함수의 선언에 따라 결정된다는 점**이다.

```jsx
var x = 1; // global

function first() {
  var x = 10;
  second();
}

function second() {
  console.log(x);
}

first(); // ?
second(); // ?
```

**즉, 이 말은 함수를 어디에서 호출하였는지는 스코프 결정에 아무런 의미를 주지 않는다는 말이다.**

그렇기 때문에, second() 함수가 **first() 함수 안에서 호출**된 것과 상관없이 second() 함수는 **global 범위에 선언**되어 있으므로, global 범위에 있는 변수 x의 값 1이 두 번 출력된 것

호이스팅

블록스코프인 `let`도 호이스팅이 된다. 그렇지만 선언 전에 참조할 경우 `undefined`를 반환하지 않고 ReferenceError를 발생시킴
